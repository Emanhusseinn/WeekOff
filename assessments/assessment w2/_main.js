//=============================================== 1//Depending on data modeling concept that you have learned:// create a factory function called makeComputer that represents computers,// what different attributes computers may have? create two computers object from your factory function and save them in one array called computers!// Note: please write one or two lines here describing your solution.//i'll declare a variable as an array ,and i'll assign two objects to it in index 1 & 2, then in my objects i'll write my keys and give them a sutable value,  as storing objects inside an array will  make calling them later easiar and also to avoud rebeatision// var computer1= {//  brand : "Lenovo",//   type: "LCD Monitor",//   modelNumber: 6185// }// var computer2 ={//  brand : "HP",//   type: "OMEN X",//   modelNumber: 3445// }function makeComputer(brand,type,modelNumber) {  return{     brand : brand,     type: type,     modelNumber: modelNumber  };}//on consolevar computer1 = makeComputer("Lenovo","LCD Monitor",6185);var computer2 = makeComputer("HP","OMEN X",3445);// var computers = [computer1,computer2] // write function displayComputer that can be used to display one computer.function displayComputer(computer) {  return computer.brand + " is our computer brand, it's a bit expenseve because it's" + computer.type + " type, as :" + computer.modelNumber + " is its model number."}displayComputer(computer2);displayComputer(computer1);//=============================================== 2//Lets make an employee profile using closures  // function employee (name,salary){  //   return {  //     name: name,  //     salary: salary  //   }     // }  // var employeeA = employee("jack", 100);  // var employeeB = employee("Mark", 200);  // var employeeC = employee("Sara", 150);function employee (name,salary){  var salary = salary;  var friends = []    return {      sayMyName: function(){       return name;      },     sayHello: function(){      return 'hello' + name;     },     increaseSalary: function(increase){      salary = salary + increase;      return 'your sallay is' + salary;     },     addFriend: function(object){      friends.push(object);      return 'you justt became friend with' + friends[0];     },  listFriends: function(){    return 'you have' + friends.length + "friends"     }     }  }  var employeeA = employee("jack", 100);  var employeeB = employee("Mark", 200);  var employeeC = employee("Sara", 150);  //create a function when invoked returns the name of that employee.  // employeeA.sayMyName(); // "jack"  // employeeB.sayMyName(); // "Mark"  //now modify that closure and add a function that says hello to the employee name;  // employeeA.sayHello(); // hello jack  // employeeB.sayHello(); // hello Mark  //modify your closure and add function increaseSalary that increases the salary for the employee by n value and return it.  //employeeA.increaseSalary(50); // "your salary is 150$"  //how about we let jack and mark meet togther!  //modify your closure and add function addFriend that accepts an object as a parameter, and let jack meets his friends.  // employeeA.addFriend(employeeB); // "you just became friend with Mark"  // employeeA.addFriend(employeeC); // "you just became friend with Mark and Sara"  //modify your closure to tell mark how many friends does he have.  // employeeA.listFriends(); // "you have 2 friends"//=============================================== 3//Lets create a pet class using OOP concept,  // a - we need to create the pets (lets create only one for now), the invocation should take the name of the pet.   // var pet1 = Pet("doggy");  // b - we need function to add the other info for the pet, called addInfo function. Make sure your functions unneeded memory space  // pet1.addInfo(age, owner, gender, species);  // c- create another function to increase the pet age by n value.  // d - create a variable called availability with the default state as false, then create another function to check the pet state, returns true if the pet is available and false if it's not  // f- in order to change the state of the pet, create a function called changeState, when called it will make the pet avaliablity true,  //    and when called again it will make it false.  // Write your code here .....  // Now, to make sure that you are actually reading, make a comment below this and type: Yes I am    //Yes I am.//=============================================== 4//Short Answer Theoretical Questions://In your own words, no more than 3 sentences, answer the following: // Q1: What is factory function?// Q2: What is data modeling?// Q3: What is OOP?// Q4: What is the meaning of the keyword this and how can the keyword be used?  //Good Luck :))//=============================================== 1//Depending on data modeling concept that you have learned:// create a factory function called makeComputer that represents computers,// what different attributes computers may have? create two computers object from your factory function and save them in one array called computers!// Note: please write one or two lines here describing your solution.var computer = [];function makeComputer(userName,ram,CPU) {return {  userName:userName,  ram:ram,  CPU:CPU }}var computer1 = makeComputer("Farah",33,44);var computer2 - makeComputer("Farah",33,44);//we can also use computer.push instead return and put the object inside it // write function displayComputer that can be used to display one computer.function displayComputer(computer) {return "  user Name: " + computer.userName +" rams:"+ computer.ram + "  CPU capacity:"+ computer.CPU }// note : when calling displayComouter Put computer 1 Or computer 2 as a parameter//=======================From farah ishaqat to Everyone:  08:50 PM//=============================================== 2//Lets make an employee profile using closures  function employee (name,salary){    var salary = salary;    var friends =[];    return {      name : name,      salary: salary,      sayMyName: function(){        return name;      },    sayHello: function(){      return 'Hello' + name ;    },    increaseSalary: function(increase){      salary = salary + increase;     return "your salary is:" + salary;    },    addFriend: function(object){      friends.push(object.name);      return "you just became friends with " + friends.join(" and ")    },    listFriends: function(){      return "you have:" + friends.length + "friends" ;    }    }     }  var employeeA = employee("jack", 100);  var employeeB = employee("Mark", 200);  var employeeC = employee("Sara", 150);